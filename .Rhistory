w %>% filter(Number=="sg" & Genus != "x") %>% qbarplot2(cxn, Genus, ylab = "Relative Frequenz", xlab = "Variante") +
guides(fill = guide_legend(title = "Genus"))
# Funktion, um schnell Barplots zu erstellen
qbarplot2 <- function(df, ..., color = c("Oranges", F), angle = 0) {
if(missing(color)) { color = "Oranges"  }
p <- qbarplot(df, cex = 5, ...) + theme_bw() +
theme(axis.text = element_text(size = 18)) +
theme(axis.title = element_text(size = 18)) +
theme(strip.text = element_text(size = 18)) +
theme(legend.text = element_text(size = 18)) +
theme(legend.title = element_text(size = 18, face = "bold")) +
theme(text = element_text(size = 18))
if(angle!=0) {
p <- p + theme(axis.text.y = element_text(size = 18)) +
theme(axis.text.x = element_text(angle = angle, size = 18,hjust = .9))
} else {
if(angle!=0) {
p <- p + theme(axis.text = element_text(size = 18))
}
}
if(color == "Blues") {
p <- p + scale_fill_brewer("Blues")
} else {
p <- p
}
return(p)
}
# plot
w %>% filter(Number=="sg" & Genus != "x") %>% qbarplot2(cxn, Genus, ylab = "Relative Frequenz", xlab = "Variante") +
guides(fill = guide_legend(title = "Genus"))
# Funktion, um schnell Barplots zu erstellen
qbarplot2 <- function(df, ..., color = c("Oranges", F), angle = 0) {
if(missing(color)) { color = "Oranges"  }
p <- qbarplot(df, cex = 5, ...) + theme_bw() +
theme(axis.text = element_text(size = 18)) +
theme(axis.title = element_text(size = 18)) +
theme(strip.text = element_text(size = 18)) +
theme(legend.text = element_text(size = 18)) +
theme(legend.title = element_text(size = 18, face = "bold")) +
theme(text = element_text(size = 18))
if(angle!=0) {
p <- p + theme(axis.text.y = element_text(size = 18)) +
theme(axis.text.x = element_text(angle = angle, size = 18,hjust = .9))
} else {
if(angle!=0) {
p <- p + theme(axis.text = element_text(size = 18))
}
}
if(color == "Oranges") {
p <- p + scale_fill_brewer("Oranges")
} else {
p <- p
}
return(p)
}
# plot
w %>% filter(Number=="sg" & Genus != "x") %>% qbarplot2(cxn, Genus, ylab = "Relative Frequenz", xlab = "Variante") +
guides(fill = guide_legend(title = "Genus"))
# plot
w %>% filter(Number=="sg" & Genus != "x") %>% qbarplot2(cxn, Genus, ylab = "Relative Frequenz", xlab = "Variante") +
guides(fill = guide_legend(title = "Genus")) +
scale_fill_brewer("oranges")
# plot
w %>% filter(Number=="sg" & Genus != "x") %>% qbarplot2(cxn, Genus, ylab = "Relative Frequenz", xlab = "Variante") +
guides(fill = guide_legend(title = "Genus")) +
scale_fill_brewer("Oranges")
RColorBrewer::brewer.pal("Oranges", 7)
RColorBrewer::brewer.pal(7, "Oranges")
RColorBrewer::brewer.pal(4, "Oranges")
# plot
w %>% filter(Number=="sg" & Genus != "x") %>% qbarplot2(cxn, Genus, ylab = "Relative Frequenz", xlab = "Variante") +
guides(fill = guide_legend(title = "Genus")) +
scale_fill_manual(RColorBrewer::brewer.pal(4, "Oranges"))
# plot
w %>% filter(Number=="sg" & Genus != "x") %>% qbarplot2(cxn, Genus, ylab = "Relative Frequenz", xlab = "Variante") +
guides(fill = guide_legend(title = "Genus")) +
scale_fill_manual(values = RColorBrewer::brewer.pal(4, "Oranges"))
?scale_fill_brewer
# plot
w %>% filter(Number=="sg" & Genus != "x") %>% qbarplot2(cxn, Genus, ylab = "Relative Frequenz", xlab = "Variante") +
guides(fill = guide_legend(title = "Genus")) +
scale_fill_brewer(palette = "Oranges")
# plot
w %>% filter(Number=="sg" & Genus != "x") %>% qbarplot2(cxn, Genus, position, ylab = "Relative Frequenz", xlab = "Variante") +
guides(fill = guide_legend(title = "Genus")) +
scale_fill_brewer(palette = "Oranges")
# plot
w %>% filter(Number=="sg" & Genus != "x") %>% qbarplot2(cxn, Genus, position, ylab = "Relative Frequenz", xlab = "Variante", wrap100=T) +
guides(fill = guide_legend(title = "Genus")) +
scale_fill_brewer(palette = "Oranges")
# plot
w %>% filter(Number=="sg" & Genus != "x" & position != "both") %>% qbarplot2(cxn, Genus, position, ylab = "Relative Frequenz", xlab = "Variante", wrap100=T) +
guides(fill = guide_legend(title = "Genus")) +
scale_fill_brewer(palette = "Oranges")
# Stellung als Faktor mit pre als Basis
w$Position <- factor(w$position, levels = c("pre", "post"))
# alle Kasus:
qbarplot(filter(w, keep == "y" & position!="both"), cxn, case,Position, wrap100 = T) + scale_fill_viridis_d(begin = .3, end = .9)
# alle Kasus:
qbarplot(filter(w, keep == "y" & position!="both"), cxn, case,Position, wrap100 = T) + scale_fill_brewer(palette = "Oranges")
# nur Kasuskategorien mit >10 Belegen:
qbarplot(droplevels(filter(w, keep == "y" & position!="both" & case %in% c("gen", "gen_dat", "gen_dat_nom_akk", "nom_akk", "dat", "unclear"))), cxn, case,position, wrap100 = T) + ylab("Relative Frequenz") + xlab("Konstruktion") +
guides(fill = guide_legend(title = "Kasus"))
# nur Kasuskategorien mit >10 Belegen:
qbarplot(droplevels(filter(w, keep == "y" & position!="both" & case %in% c("gen", "gen_dat", "gen_dat_nom_akk", "nom_akk", "dat", "unclear"))), cxn, case,position, wrap100 = T) + ylab("Relative Frequenz") + xlab("Konstruktion") +
guides(fill = guide_legend(title = "Kasus")) +
scale_fill_brewer(palette = "Oranges")
# nur Kasuskategorien mit >10 Belegen:
qbarplot(droplevels(filter(w, keep == "y" & Position!="both" & case %in% c("gen", "gen_dat", "gen_dat_nom_akk", "nom_akk", "dat", "unclear"))), cxn, case,position, wrap100 = T) + ylab("Relative Frequenz") + xlab("Konstruktion") +
guides(fill = guide_legend(title = "Kasus")) +
scale_fill_brewer(palette = "Oranges")
# nur Kasuskategorien mit >10 Belegen:
qbarplot(droplevels(filter(w, keep == "y" & Position!="both" & case %in% c("gen", "gen_dat", "gen_dat_nom_akk", "nom_akk", "dat", "unclear"))), cxn, case, Position, wrap100 = T) + ylab("Relative Frequenz") + xlab("Konstruktion") +
guides(fill = guide_legend(title = "Kasus")) +
scale_fill_brewer(palette = "Oranges")
ggsave("figures/wegen_s_kasus.png")
# plot
w %>% filter(Number=="sg" & Genus != "x" & position != "both") %>% qbarplot2(cxn, Genus, Position, ylab = "Relative Frequenz", xlab = "Variante", wrap100=T) +
guides(fill = guide_legend(title = "Genus")) +
scale_fill_brewer(palette = "Oranges")
ggsave("figures/wegens_genusdistribution.png")
# Chunk 1
# CRAN-Pakete installieren
sapply(c("data.table", "tidyverse", "devtools", "party", "Hmisc", "rms", "RColorBrewer", "readxl", "patchwork"), function(x)
if(!is.element(x, installed.packages())) install.packages(x, dependencies = T))
# Nom-CRAN-Paket installieren (falls noch nicht installiert)
if(!is.element("wizard", installed.packages())) {
devtools::install_github("hartmast/wizard")
}
# Pakete laden
library(tidyverse)
library(data.table)
library(wizard)
library(party)
library(Hmisc)
library(rms)
library(RColorBrewer)
library(readxl)
library(patchwork)
library(ngram)
# Funktion, um schnell Barplots zu erstellen
qbarplot2 <- function(df, ..., color = c("Oranges", F), angle = 0) {
if(missing(color)) { color = "Oranges"  }
p <- qbarplot(df, cex = 5, ...) + theme_bw() +
theme(axis.text = element_text(size = 18)) +
theme(axis.title = element_text(size = 18)) +
theme(strip.text = element_text(size = 18)) +
theme(legend.text = element_text(size = 18)) +
theme(legend.title = element_text(size = 18, face = "bold")) +
theme(text = element_text(size = 18))
if(angle!=0) {
p <- p + theme(axis.text.y = element_text(size = 18)) +
theme(axis.text.x = element_text(angle = angle, size = 18,hjust = .9))
} else {
if(angle!=0) {
p <- p + theme(axis.text = element_text(size = 18))
}
}
if(color == "Oranges") {
p <- p + scale_fill_brewer(palette = "Oranges")
} else {
p <- p
}
return(p)
}
# Chunk 2
# Daten einlesen
# wegens:
ws <- read_csv("wegens/wegens_DECOW16BX_anno.csv")
ws <- mutate(ws, cxn = "wegens")
# wegen ohne s:
w0 <- read_csv("wegens/wegen_sample_DECOW16BX_anno.csv")
w0 <- mutate(w0, cxn = "wegen")
# Nacherhebung postnominales wegen:
w0p <- read_csv("wegens/wegen_postnom_DECOW16A_NANO_filtered.csv")
w0p <- mutate(w0p, cxn = "wegen")
# Spalte Position hinzufügen
w0p$position <- "post"
# DATA WRANGLING - wegen(s)
# relevante Spalten finden
mycols <- intersect(colnames(w0), colnames(w0p))
# zusammenfügen
w <- rbind(mutate(select(ws, all_of(mycols)), cxn = "wegens"),
mutate(select(w0, all_of(mycols)), cxn = "wegen"),
mutate(select(w0p, all_of(mycols)), cxn = "wegen"))
# nur true positives behalten
w <- filter(w, keep == "y")
# Duplikate entfernen
w <- w[-which(duplicated(select(w, Left, Key, Right))),]
# nur postnominales wegen(s)
wp <- filter(w, position == "post")
# Chunk 3
# Subset mit starken Maskulina und Neutra
s <- filter(wp, s_less %in% c("y", "n") & case=="gen" & !is.na(Freq))
# convert categorical columns to factors
cols <- c("s_less", "cxn", "monoref", "forum", "abbreviation")
s[cols] <- lapply(s[cols], as.factor)
# add binary proper name column
s$name <- factor(ifelse(s$Proper_name!="n", "y", "n"))
# willen(s)
s2 <- select(s, s_less, cxn, monoref, name, Freq, pn_or_acro_or_nonnative_in_s, abbreviation, position, Determiner)
# use more intuitive names
colnames(s2) <- c("s_los", "Variante", "Monoreferenz", "Eigenname", "Frequenz", "Schonungsbedarf_s", "Kurzwort", "Position", "Determinierer")
# replace NAs
s2 <- replace_na(s2, list(Schonungsbedarf_s = "n"))
s2$Schonungsbedarf_s <- factor(s2$Schonungsbedarf_s)
# German s-los column
s2$s_los <- ifelse(s2$s_los=="n", "mit s", "s-los")
s2$s_los <- factor(s2$s_los, levels = rev(c("s-los", "mit s")))
# log frequency
s2$LogFreq <- log(s2$Frequenz)
# Determiner as factor
s2$Determinierer <- factor(s2$Determinierer)
# ctree
stree <- ctree(s_los ~ Variante + Monoreferenz +
Eigenname + Kurzwort + Schonungsbedarf_s + LogFreq, data = s2)
plot(stree)
# random forest
sforest <- cforest(s_los ~ Variante + Monoreferenz +
Eigenname + Kurzwort + Schonungsbedarf_s + LogFreq, data = s2)
# get index of concordance - code
# adapted from Tagliamonte & Baayen 2012
s2.trp <- treeresponse(sforest)
s2$PredFOREST <- sapply(s2.trp, FUN = function(v)return(v[2]))
s2$s_los_bin <- (s2$s_los=="s-los") + 0
somers2(s2$PredFOREST, s2$s_los_bin)
# variable importance
vi <- varimp(sforest, conditional = T)
lattice::dotplot(sort(vi))
# Chunk 4
# Subset mit starken Maskulina und Neutra
s <- filter(w, s_less %in% c("y", "n") & case=="gen" & !is.na(Freq))
# convert categorical columns to factors
cols <- c("s_less", "cxn", "monoref", "forum", "abbreviation", "position")
s[cols] <- lapply(s[cols], as.factor)
# add binary proper name column
s$name <- factor(ifelse(s$Proper_name!="n", "y", "n"))
# willen(s)
s2 <- select(s, s_less, cxn, monoref, name, Freq, pn_or_acro_or_nonnative_in_s, abbreviation, position, Determiner)
# use more intuitive names
colnames(s2) <- c("s_los", "Variante", "Monoreferenz", "Eigenname", "Frequenz", "Schonungsbedarf_s", "Kurzwort", "Position", "Determinierer")
# replace NAs
s2 <- replace_na(s2, list(Schonungsbedarf_s = "n"))
s2$Schonungsbedarf_s <- factor(s2$Schonungsbedarf_s)
# German s-los column
s2$s_los <- ifelse(s2$s_los=="n", "mit s", "s-los")
s2$s_los <- factor(s2$s_los, levels = rev(c("s-los", "mit s")))
# log frequency
s2$LogFreq <- log(s2$Frequenz)
# Determiner as factor
s2$Determinierer <- factor(s2$Determinierer)
# ctree
stree <- ctree(s_los ~ Variante + Monoreferenz + Position +
Eigenname + Kurzwort + Schonungsbedarf_s + LogFreq, data = s2)
plot(stree)
# random forest
sforest <- cforest(s_los ~ Variante + Monoreferenz +
Eigenname + Kurzwort + Schonungsbedarf_s + LogFreq, data = s2)
# get index of concordance - code
# adapted from Tagliamonte & Baayen 2012
s2.trp <- treeresponse(sforest)
s2$PredFOREST <- sapply(s2.trp, FUN = function(v)return(v[2]))
s2$s_los_bin <- (s2$s_los=="s-los") + 0
somers2(s2$PredFOREST, s2$s_los_bin)
# variable importance
vi <- varimp(sforest, conditional = T)
lattice::dotplot(sort(vi))
# Chunk 5
# Stellung als Faktor mit pre als Basis
w$Position <- factor(w$position, levels = c("pre", "post"))
w$case <- factor(w$case, levels = c("nom", "gen", "gen_dat", "gen_dat_nom", "gen_nom_akk", "gen_dat_nom_akk", "gen_akk", "nom_akk", "akk", "dat", "dat_akk", "unclear"))
# alle Kasus:
qbarplot(filter(w, keep == "y" & position!="both"), cxn, case,Position, wrap100 = T) + scale_fill_viridis_d(begin = .3, end = .9)
# nur Kasuskategorien mit >10 Belegen:
qbarplot(droplevels(filter(w, keep == "y" & Position!="both" & case %in% c("gen", "gen_dat", "gen_dat_nom_akk", "nom_akk", "dat", "unclear"))), cxn, case, Position, wrap100 = T) + ylab("Relative Frequenz") + xlab("Konstruktion") +
guides(fill = guide_legend(title = "Kasus")) +
scale_fill_brewer(palette = "Oranges")
# ggsave("figures/wegen_s_kasus.png")
# Chunk 6
# Unterscheidung starke/schwache Maskulina
w$klasse <- NA
w[which(w$Gender %in% c("m", "n") & w$s_less=="x" & w$Number=="sg"),]$klasse <- "schwach"
w[which(is.na(w$klasse)),]$klasse <- "nicht_schwach"
# Genus-Spalte mit Unterscheidung zwischen starken und schwachen Nomen
w$Genus <- ifelse(w$Gender=="m" & w$klasse=="schwach", "Mask. schwach", w$Gender)
w$Genus <- ifelse(w$Gender=="m" & w$klasse!="schwach", "Mask. stark/gemischt", w$Genus)
w$Genus <- ifelse(w$Genus=="f", "Femininum", w$Genus)
w$Genus <- ifelse(w$Genus=="n", "Neutrum", w$Genus)
# plot
w %>% filter(Number=="sg" & Genus != "x" & position != "both") %>% qbarplot2(cxn, Genus, Position, ylab = "Relative Frequenz", xlab = "Variante", wrap100=T) +
guides(fill = guide_legend(title = "Genus")) +
scale_fill_brewer(palette = "Oranges")
# ggsave("figures/wegens_genusdistribution.png")
w$klasse
w %>% filter(Number=="sg" & Genus %in% c("m", "n") & klasse=="nicht_schwach" & position != "both") %>% qbarplot2(s_less, cxn)
w$cxn
w %>% filter(Number=="sg" & Genus %in% c("m", "n") & klasse=="nicht_schwach" & position != "both") %>% qbarplot(s_less, cxn)
w %>% filter(Number=="sg" & Genus %in% c("m", "n") & klasse=="nicht_schwach" & position != "both")
w %>% filter(Number=="sg" & Gender %in% c("m", "n") & klasse=="nicht_schwach" & position != "both")
w$Genus
w %>% filter(Number=="sg" & Gender %in% c("m", "n") & klasse=="nicht_schwach" & position != "both")
w %>% filter(Number=="sg" & Gender %in% c("m", "n") & klasse=="nicht_schwach" & position != "both") %>% qbarplot(s_less, cxn)
w %>% filter(Number=="sg" & Gender %in% c("m", "n") & klasse=="nicht_schwach" & position != "both") %>% qbarplot(s_less, cxn, Position) %>% scale_fill_brewer(palette = "Oranges")
w %>% filter(Number=="sg" & Gender %in% c("m", "n") & klasse=="nicht_schwach" & position != "both") %>% qbarplot(s_less, cxn, Position) %>% scale_fill_brewer(palette = "Oranges")
w %>% filter(Number=="sg" & Gender %in% c("m", "n") & klasse=="nicht_schwach" & position != "both") %>% qbarplot(s_less, cxn, Position)
w %>% filter(Number=="sg" & Gender %in% c("m", "n") & klasse=="nicht_schwach" & position != "both") %>% qbarplot(s_less, cxn, Position, wrap100 = T)
w %>% filter(Number=="sg" & Gender %in% c("m", "n") & klasse=="nicht_schwach" & position != "both") %>% qbarplot(s_less, cxn, Position, wrap100 = T) + scale_fill_brewer("Oranges")
w %>% filter(Number=="sg" & Gender %in% c("m", "n") & klasse=="nicht_schwach" & position != "both") %>% qbarplot(s_less, cxn, Position, wrap100 = T) + scale_fill_brewer(palette = "Oranges")
w %>% filter(Number=="sg" & Gender %in% c("m", "n") & klasse=="nicht_schwach" & position != "both") %>% qbarplot(s_less, cxn, Position, wrap100 = T) + scale_fill_brewer(palette = "Oranges") +
guides(fill = guide_legend(title = "Konstruktion"))
w %>% filter(Number=="sg" & Gender %in% c("m", "n") & klasse=="nicht_schwach" & position != "both") %>% qbarplot(cxn, s_less, Position, wrap100 = T) + scale_fill_brewer(palette = "Oranges")
w %>% filter(Number=="sg" & Gender %in% c("m", "n") & klasse=="nicht_schwach" & position != "both") %>% qbarplot(cxn, s_less, Position, wrap100 = T) + scale_fill_brewer(palette = "Oranges") +
guides(fill = guide_legend(title = "s-los"))
w %>% filter(Number=="sg" & Gender %in% c("m", "n") & klasse=="nicht_schwach" & position != "both") %>% qbarplot(cxn, s_less, Position, wrap100 = T) + scale_fill_brewer(palette = "Oranges") +
guides(fill = guide_legend(title = "s-los")) + xlab("Konstruktion") + ylab("Relative Frequenz")
ggsave("figures/wegen_s_s_los.png")
ggsave("figures/wegen_s_s_los.png")
w$Freq
w$Freq %>% log1p
w$Freq %>% log1p %>% hist
plogis(13.883)
log1p(13.883)
log1p(1)
exp(13.813)
w$Freq %>% hist
w$Freq
log1p(w$Freq)
w$Freq
exp(13.883)
exp(13)
log1p(1000000)
exp(83.883)
exp(13.883)
which(log1p(w$Freq) > 13.883)
w[which(log1p(w$Freq) > 13.883),]$lemma %>% unique
w$logFreq <- log1p(w$Freq)
w %>% filter(Number=="sg" & Gender %in% c("m", "n") & klasse=="nicht_schwach" & position == "post")
w %>% filter(Number=="sg" & Gender %in% c("m", "n") & klasse=="nicht_schwach" & position == "post" & logFreq > 13.883)
w %>% filter(Number=="sg" & Gender %in% c("m", "n") & klasse=="nicht_schwach" & position == "post" & logFreq > 13.883) %>% group_by(lemma) %>% summarise(
n = n()
) %>% arrange(desc(n))
w$Gender
s
s$Gender
ifelse(w$Genus %in% c("Mask. stark/gemischt", "Neutrum"), "y", "n")
w$stark_gem_neutr <- ifelse(w$Genus %in% c("Mask. stark/gemischt", "Neutrum"), "y", "n")
w$stark_gem_neutr <- factor(w$stark_gem_neutr)
library(lme4)
library(effects)
m <- glmer(stark_gem_neutr ~ cxn * position + (1 | lemma))
m <- glmer(stark_gem_neutr ~ cxn * position + (1 | lemma), data = w)
m <- glmer(stark_gem_neutr ~ cxn * position + (1 | lemma), data = w, family = "binomial")
m <- glmer(stark_gem_neutr ~ cxn + position + (1 | lemma), data = w, family = "binomial")
m <- glmer(stark_gem_neutr ~ factor(cxn) + factor(position) + (1 | lemma), data = w, family = "binomial")
na.omit(w)
which(is.na(w$cxn))
which(is.na(w$position))
m <- glmer(stark_gem_neutr ~ factor(cxn) + Position + (1 | lemma), data = w, family = "binomial")
summary(m)
w$stark_gem_neutr
w$cxn
w$cxn %>% table
w$Position
w$cxn_factor <- factor(w$cxn)
m <- glmer(stark_gem_neutr ~ cxn_factor * Position + (1 | lemma), data = w, family = "binomial")
?glmer
m <- glmer(stark_gem_neutr ~ cxn_factor * Position + (1 | lemma), data = w, family = "binomial", control = glmerControl(optimizer = "bobyqa"))
m <- glmer(stark_gem_neutr ~ cxn_factor + Position + (1 | lemma), data = w, family = "binomial", control = glmerControl(optimizer = "bobyqa"))
plot(allEffects(m))
qbarplot(w, stark_gem_neutr, cxn, Position)
qbarplot(w, stark_gem_neutr, cxn, Position, wrap100=T)
qbarplot(w, cxn, stark_gem_neutr, Position, wrap100=T)
w$cxn_factor
install.packages("afex")
allFit(m)
qbarplot(w, cxn, stark_gem_neutr, Position, wrap100=T)
m <- lmer(stark_gem_neutr ~ cxn_factor + Position, data = w, family = "binomial")
m <- lmer(stark_gem_neutr ~ cxn_factor + Position, data = w)
m <- glm(stark_gem_neutr ~ cxn_factor + Position, data = w)
m <- glm(stark_gem_neutr ~ cxn_factor + Position, data = w, family = "binomial")
plot(allEffects(m))
summary(m)
m <- glm(stark_gem_neutr ~ cxn_factor * Position, data = w, family = "binomial")
summary(m)
plot(allEffects(m))
# nur Kasuskategorien mit >10 Belegen:
qbarplot(droplevels(filter(w, keep == "y" & Position!="both" & case %in% c("gen", "gen_dat", "gen_dat_nom_akk", "nom_akk", "dat", "unclear"))), cxn, case, Position, wrap100 = T) + ylab("Relative Frequenz") + xlab("Konstruktion") +
guides(fill = guide_legend(title = "Kasus")) +
scale_fill_brewer(palette = "Oranges")
# einfaches Regressionsmodell Gen. vs. Dat
m <- glm(case ~ cxn * Position, data = filter(w, case %in% c("gen", "dat")), family = "binomial")
summary(m)
# einfaches Regressionsmodell Gen. vs. Dat
m <- glm(case ~  Position, data = filter(w, case %in% c("gen", "dat")), family = "binomial")
summary(m)
# einfaches Regressionsmodell Gen. vs. Dat
m <- glmer(case ~  Position + (1 | lemma), data = filter(w, case %in% c("gen", "dat")), family = "binomial")
summary(m)
# Chunk 1
# CRAN-Pakete installieren
sapply(c("data.table", "tidyverse", "devtools", "party", "Hmisc", "rms", "RColorBrewer", "readxl", "patchwork"), function(x)
if(!is.element(x, installed.packages())) install.packages(x, dependencies = T))
# Nom-CRAN-Paket installieren (falls noch nicht installiert)
if(!is.element("wizard", installed.packages())) {
devtools::install_github("hartmast/wizard")
}
# Pakete laden
library(tidyverse)
library(data.table)
library(wizard)
library(party)
library(Hmisc)
library(rms)
library(RColorBrewer)
library(readxl)
library(patchwork)
library(ngram)
library(lme4)
library(effects)
# Funktion, um schnell Barplots zu erstellen
qbarplot2 <- function(df, ..., color = c("Oranges", F), angle = 0) {
if(missing(color)) { color = "Oranges"  }
p <- qbarplot(df, cex = 5, ...) + theme_bw() +
theme(axis.text = element_text(size = 18)) +
theme(axis.title = element_text(size = 18)) +
theme(strip.text = element_text(size = 18)) +
theme(legend.text = element_text(size = 18)) +
theme(legend.title = element_text(size = 18, face = "bold")) +
theme(text = element_text(size = 18))
if(angle!=0) {
p <- p + theme(axis.text.y = element_text(size = 18)) +
theme(axis.text.x = element_text(angle = angle, size = 18,hjust = .9))
} else {
if(angle!=0) {
p <- p + theme(axis.text = element_text(size = 18))
}
}
if(color == "Oranges") {
p <- p + scale_fill_brewer(palette = "Oranges")
} else {
p <- p
}
return(p)
}
# Chunk 2
# Daten einlesen
# wegens:
ws <- read_csv("wegens/wegens_DECOW16BX_anno.csv")
ws <- mutate(ws, cxn = "wegens")
# wegen ohne s:
w0 <- read_csv("wegens/wegen_sample_DECOW16BX_anno.csv")
w0 <- mutate(w0, cxn = "wegen")
# Nacherhebung postnominales wegen:
w0p <- read_csv("wegens/wegen_postnom_DECOW16A_NANO_filtered.csv")
w0p <- mutate(w0p, cxn = "wegen")
# Spalte Position hinzufügen
w0p$position <- "post"
# DATA WRANGLING - wegen(s)
# relevante Spalten finden
mycols <- intersect(colnames(w0), colnames(w0p))
# zusammenfügen
w <- rbind(mutate(select(ws, all_of(mycols)), cxn = "wegens"),
mutate(select(w0, all_of(mycols)), cxn = "wegen"),
mutate(select(w0p, all_of(mycols)), cxn = "wegen"))
# nur true positives behalten
w <- filter(w, keep == "y")
# Duplikate entfernen
w <- w[-which(duplicated(select(w, Left, Key, Right))),]
# nur postnominales wegen(s)
wp <- filter(w, position == "post")
# Chunk 3
# Subset mit starken Maskulina und Neutra
s <- filter(wp, s_less %in% c("y", "n") & case=="gen" & !is.na(Freq))
# convert categorical columns to factors
cols <- c("s_less", "cxn", "monoref", "forum", "abbreviation")
s[cols] <- lapply(s[cols], as.factor)
# add binary proper name column
s$name <- factor(ifelse(s$Proper_name!="n", "y", "n"))
# willen(s)
s2 <- select(s, s_less, cxn, monoref, name, Freq, pn_or_acro_or_nonnative_in_s, abbreviation, position, Determiner)
# use more intuitive names
colnames(s2) <- c("s_los", "Variante", "Monoreferenz", "Eigenname", "Frequenz", "Schonungsbedarf_s", "Kurzwort", "Position", "Determinierer")
# replace NAs
s2 <- replace_na(s2, list(Schonungsbedarf_s = "n"))
s2$Schonungsbedarf_s <- factor(s2$Schonungsbedarf_s)
# German s-los column
s2$s_los <- ifelse(s2$s_los=="n", "mit s", "s-los")
s2$s_los <- factor(s2$s_los, levels = rev(c("s-los", "mit s")))
# log frequency
s2$LogFreq <- log(s2$Frequenz)
# Determiner as factor
s2$Determinierer <- factor(s2$Determinierer)
# ctree
stree <- ctree(s_los ~ Variante + Monoreferenz +
Eigenname + Kurzwort + Schonungsbedarf_s + LogFreq, data = s2)
plot(stree)
# random forest
sforest <- cforest(s_los ~ Variante + Monoreferenz +
Eigenname + Kurzwort + Schonungsbedarf_s + LogFreq, data = s2)
# get index of concordance - code
# adapted from Tagliamonte & Baayen 2012
s2.trp <- treeresponse(sforest)
s2$PredFOREST <- sapply(s2.trp, FUN = function(v)return(v[2]))
s2$s_los_bin <- (s2$s_los=="s-los") + 0
somers2(s2$PredFOREST, s2$s_los_bin)
# variable importance
vi <- varimp(sforest, conditional = T)
lattice::dotplot(sort(vi))
s2
# was passiert, wenn man "Geld" weglässt?
stree2 <- ctree(s_los ~ Variante + Monoreferenz +
Eigenname + Kurzwort + Schonungsbedarf_s + LogFreq, data = filter(s2, lemma!="Geld"))
