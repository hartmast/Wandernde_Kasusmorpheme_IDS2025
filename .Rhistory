s2$s_los <- factor(s2$s_los, levels = rev(c("s-los", "mit s")))
# log frequency
s2$LogFreq <- log(s2$Frequenz)
# Determiner as factor
s2$Determinierer <- factor(s2$Determinierer)
# ctree
stree <- ctree(s_los ~ Variante + Monoreferenz + Position +
Eigenname + Kurzwort + Schonungsbedarf_s + LogFreq, data = s2)
plot(stree)
# random forest
sforest <- cforest(s_los ~ Variante + Monoreferenz +
Eigenname + Kurzwort + Schonungsbedarf_s + LogFreq, data = s2)
png("cit_wegen_s_incl_pre_excl_Geld.png", width = 6.5, height = 5, un = "in", res = 300)
plot(stree)
dev.off()
png("cit_wegen_s_incl_pre_excl_Geld.png", width = 8, height = 5, un = "in", res = 300)
plot(stree)
dev.off()
# random forest
sforest <- cforest(s_los ~ Variante + Monoreferenz +
Eigenname + Kurzwort + Schonungsbedarf_s + LogFreq, data = s2)
# get index of concordance - code
# adapted from Tagliamonte & Baayen 2012
s2.trp <- treeresponse(sforest)
s2$PredFOREST <- sapply(s2.trp, FUN = function(v)return(v[2]))
s2$s_los_bin <- (s2$s_los=="s-los") + 0
somers2(s2$PredFOREST, s2$s_los_bin)
# variable importance
vi <- varimp(sforest, conditional = T)
lattice::dotplot(sort(vi), xlab="Conditional variable importance", xlab=list(label="Conditional variable importance", fontsize=20), scale=list(y=list(cex=2), x = list(cex = 2), x.title = list(cex = 2)),
par.settings = list(
axis.text = list(cex = 2)       # Controls axis text
))
lattice::dotplot(sort(vi),  xlab=list(label="Conditional variable importance", fontsize=20), scale=list(y=list(cex=2), x = list(cex = 2), x.title = list(cex = 2)),
par.settings = list(
axis.text = list(cex = 2)       # Controls axis text
))
png("varimp_wegen_s_incl_pre_excl_Geld", width = 6.5, height = 5, un = "in", res = 300)
lattice::dotplot(sort(vi),  xlab=list(label="Conditional variable importance", fontsize=20), scale=list(y=list(cex=2), x = list(cex = 2), x.title = list(cex = 2)),
par.settings = list(
axis.text = list(cex = 2)       # Controls axis text
))
dev.off()
# random forest
sforest <- cforest(s_los ~ Variante + Monoreferenz + Position +
Eigenname + Kurzwort + Schonungsbedarf_s + LogFreq, data = s2)
# get index of concordance - code
# adapted from Tagliamonte & Baayen 2012
s2.trp <- treeresponse(sforest)
s2$PredFOREST <- sapply(s2.trp, FUN = function(v)return(v[2]))
s2$s_los_bin <- (s2$s_los=="s-los") + 0
somers2(s2$PredFOREST, s2$s_los_bin)
# variable importance
vi <- varimp(sforest, conditional = T)
lattice::dotplot(sort(vi),  xlab=list(label="Conditional variable importance", fontsize=20), scale=list(y=list(cex=2), x = list(cex = 2), x.title = list(cex = 2)),
par.settings = list(
axis.text = list(cex = 2)       # Controls axis text
))
png("varimp_wegen_s_incl_pre_excl_Geld", width = 6.5, height = 5, un = "in", res = 300)
lattice::dotplot(sort(vi),  xlab=list(label="Conditional variable importance", fontsize=20), scale=list(y=list(cex=2), x = list(cex = 2), x.title = list(cex = 2)),
par.settings = list(
axis.text = list(cex = 2)       # Controls axis text
))
dev.off()
png("varimp_wegen_s_incl_pre_excl_Geld.png", width = 6.5, height = 5, un = "in", res = 300)
lattice::dotplot(sort(vi),  xlab=list(label="Conditional variable importance", fontsize=20), scale=list(y=list(cex=2), x = list(cex = 2), x.title = list(cex = 2)),
par.settings = list(
axis.text = list(cex = 2)       # Controls axis text
))
dev.off()
png("varimp_wegen_s_incl_pre_excl_Geld.png", width = 8, height = 5, un = "in", res = 300)
lattice::dotplot(sort(vi),  xlab=list(label="Conditional variable importance", fontsize=20), scale=list(y=list(cex=2), x = list(cex = 2), x.title = list(cex = 2)),
par.settings = list(
axis.text = list(cex = 2)       # Controls axis text
))
dev.off()
# Chunk 1
# CRAN-Pakete installieren
sapply(c("data.table", "tidyverse", "devtools", "party", "Hmisc", "rms", "RColorBrewer", "readxl", "patchwork"), function(x)
if(!is.element(x, installed.packages())) install.packages(x, dependencies = T))
# Nom-CRAN-Paket installieren (falls noch nicht installiert)
if(!is.element("wizard", installed.packages())) {
devtools::install_github("hartmast/wizard")
}
# Pakete laden
library(tidyverse)
library(data.table)
library(wizard)
library(party)
library(Hmisc)
library(rms)
library(RColorBrewer)
library(readxl)
library(patchwork)
library(ngram)
library(lme4)
library(effects)
# Funktion, um schnell Barplots zu erstellen
qbarplot2 <- function(df, ..., color = c("Oranges", F), angle = 0) {
if(missing(color)) { color = "Oranges"  }
p <- qbarplot(df, cex = 5, ...) + theme_bw() +
theme(axis.text = element_text(size = 18)) +
theme(axis.title = element_text(size = 18)) +
theme(strip.text = element_text(size = 18)) +
theme(legend.text = element_text(size = 18)) +
theme(legend.title = element_text(size = 18, face = "bold")) +
theme(text = element_text(size = 18))
if(angle!=0) {
p <- p + theme(axis.text.y = element_text(size = 18)) +
theme(axis.text.x = element_text(angle = angle, size = 18,hjust = .9))
} else {
if(angle!=0) {
p <- p + theme(axis.text = element_text(size = 18))
}
}
if(color == "Oranges") {
p <- p + scale_fill_brewer(palette = "Oranges")
} else {
p <- p
}
return(p)
}
# Chunk 2
# Daten einlesen
# wegens:
ws <- read_csv("wegens/wegens_DECOW16BX_anno.csv")
ws <- mutate(ws, cxn = "wegens")
# wegen ohne s:
w0 <- read_csv("wegens/wegen_sample_DECOW16BX_anno.csv")
w0 <- mutate(w0, cxn = "wegen")
# Nacherhebung postnominales wegen:
w0p <- read_csv("wegens/wegen_postnom_DECOW16A_NANO_filtered.csv")
w0p <- mutate(w0p, cxn = "wegen")
# Spalte Position hinzufügen
w0p$position <- "post"
# DATA WRANGLING - wegen(s)
# relevante Spalten finden
mycols <- intersect(colnames(w0), colnames(w0p))
# zusammenfügen
w <- rbind(mutate(select(ws, all_of(mycols)), cxn = "wegens"),
mutate(select(w0, all_of(mycols)), cxn = "wegen"),
mutate(select(w0p, all_of(mycols)), cxn = "wegen"))
# nur true positives behalten
w <- filter(w, keep == "y")
# Duplikate entfernen
w <- w[-which(duplicated(select(w, Left, Key, Right))),]
# nur postnominales wegen(s)
wp <- filter(w, position == "post")
# Subset mit starken Maskulina und Neutra
s <- filter(wp, s_less %in% c("y", "n") & case=="gen" & !is.na(Freq))
# convert categorical columns to factors
cols <- c("s_less", "cxn", "monoref", "forum", "abbreviation")
s[cols] <- lapply(s[cols], as.factor)
# add binary proper name column
s$name <- factor(ifelse(s$Proper_name!="n", "y", "n"))
# willen(s)
s2 <- select(s, s_less, cxn, monoref, name, Freq, pn_or_acro_or_nonnative_in_s, abbreviation, position, Determiner)
# use more intuitive names
colnames(s2) <- c("s_los", "Variante", "Monoreferenz", "Eigenname", "Frequenz", "Schonungsbedarf_s", "Kurzwort", "Position", "Determinierer")
# replace NAs
s2 <- replace_na(s2, list(Schonungsbedarf_s = "n"))
s2$Schonungsbedarf_s <- factor(s2$Schonungsbedarf_s)
# German s-los column
s2$s_los <- ifelse(s2$s_los=="n", "mit s", "s-los")
s2$s_los <- factor(s2$s_los, levels = rev(c("s-los", "mit s")))
# log frequency
s2$LogFreq <- log(s2$Frequenz)
# Determiner as factor
s2$Determinierer <- factor(s2$Determinierer)
s_los
s2
# ctree
stree <- ctree(s_los ~ Variante + Monoreferenz + Position +
Eigenname + Kurzwort + Schonungsbedarf_s + LogFreq, data = s2)
s2$Position <- factor(s2$Position)
# ctree
stree <- ctree(s_los ~ Variante + Monoreferenz + Position +
Eigenname + Kurzwort + Schonungsbedarf_s + LogFreq, data = s2)
#png("cit_wegen_s.png", width = 8, height = 5, un = "in", res = 300)
plot(stree)
s2$Position
# Subset mit starken Maskulina und Neutra
s <- filter(w, s_less %in% c("y", "n") & case=="gen" & !is.na(Freq))
# convert categorical columns to factors
cols <- c("s_less", "cxn", "monoref", "forum", "abbreviation", "position")
s[cols] <- lapply(s[cols], as.factor)
# add binary proper name column
s$name <- factor(ifelse(s$Proper_name!="n", "y", "n"))
# willen(s)
s2 <- select(s, s_less, cxn, monoref, name, Freq, pn_or_acro_or_nonnative_in_s, abbreviation, position, Determiner)
# use more intuitive names
colnames(s2) <- c("s_los", "Variante", "Monoreferenz", "Eigenname", "Frequenz", "Schonungsbedarf_s", "Kurzwort", "Position", "Determinierer")
# replace NAs
s2 <- replace_na(s2, list(Schonungsbedarf_s = "n"))
s2$Schonungsbedarf_s <- factor(s2$Schonungsbedarf_s)
# German s-los column
s2$s_los <- ifelse(s2$s_los=="n", "mit s", "s-los")
s2$s_los <- factor(s2$s_los, levels = rev(c("s-los", "mit s")))
# log frequency
s2$LogFreq <- log(s2$Frequenz)
# Determiner as factor
s2$Determinierer <- factor(s2$Determinierer)
# ctree
stree <- ctree(s_los ~ Variante + Monoreferenz + Position +
Eigenname + Kurzwort + Schonungsbedarf_s + LogFreq, data = s2)
# png("cit_wegen_s_incl_pre.png", width = 6.5, height = 5, un = "in", res = 300)
plot(stree)
# Chunk 1
# CRAN-Pakete installieren
sapply(c("data.table", "tidyverse", "devtools", "party", "Hmisc", "rms", "RColorBrewer", "readxl", "patchwork"), function(x)
if(!is.element(x, installed.packages())) install.packages(x, dependencies = T))
# Nom-CRAN-Paket installieren (falls noch nicht installiert)
if(!is.element("wizard", installed.packages())) {
devtools::install_github("hartmast/wizard")
}
# Pakete laden
library(tidyverse)
library(data.table)
library(wizard)
library(party)
library(Hmisc)
library(rms)
library(RColorBrewer)
library(readxl)
library(patchwork)
library(ngram)
library(lme4)
library(effects)
# Funktion, um schnell Barplots zu erstellen
qbarplot2 <- function(df, ..., color = c("Oranges", F), angle = 0) {
if(missing(color)) { color = "Oranges"  }
p <- qbarplot(df, cex = 5, ...) + theme_bw() +
theme(axis.text = element_text(size = 18)) +
theme(axis.title = element_text(size = 18)) +
theme(strip.text = element_text(size = 18)) +
theme(legend.text = element_text(size = 18)) +
theme(legend.title = element_text(size = 18, face = "bold")) +
theme(text = element_text(size = 18))
if(angle!=0) {
p <- p + theme(axis.text.y = element_text(size = 18)) +
theme(axis.text.x = element_text(angle = angle, size = 18,hjust = .9))
} else {
if(angle!=0) {
p <- p + theme(axis.text = element_text(size = 18))
}
}
if(color == "Oranges") {
p <- p + scale_fill_brewer(palette = "Oranges")
} else {
p <- p
}
return(p)
}
# Chunk 2
# Daten einlesen
# wegens:
ws <- read_csv("wegens/wegens_DECOW16BX_anno.csv")
ws <- mutate(ws, cxn = "wegens")
# wegen ohne s:
w0 <- read_csv("wegens/wegen_sample_DECOW16BX_anno.csv")
w0 <- mutate(w0, cxn = "wegen")
# Nacherhebung postnominales wegen:
w0p <- read_csv("wegens/wegen_postnom_DECOW16A_NANO_filtered.csv")
w0p <- mutate(w0p, cxn = "wegen")
# Spalte Position hinzufügen
w0p$position <- "post"
# DATA WRANGLING - wegen(s)
# relevante Spalten finden
mycols <- intersect(colnames(w0), colnames(w0p))
# zusammenfügen
w <- rbind(mutate(select(ws, all_of(mycols)), cxn = "wegens"),
mutate(select(w0, all_of(mycols)), cxn = "wegen"),
mutate(select(w0p, all_of(mycols)), cxn = "wegen"))
# nur true positives behalten
w <- filter(w, keep == "y")
# Duplikate entfernen
w <- w[-which(duplicated(select(w, Left, Key, Right))),]
# nur postnominales wegen(s)
wp <- filter(w, position == "post")
# Subset mit starken Maskulina und Neutra
s <- filter(wp, s_less %in% c("y", "n") & case=="gen" & !is.na(Freq))
# convert categorical columns to factors
cols <- c("s_less", "cxn", "monoref", "forum", "abbreviation")
s[cols] <- lapply(s[cols], as.factor)
# add binary proper name column
s$name <- factor(ifelse(s$Proper_name!="n", "y", "n"))
# willen(s)
s2 <- select(s, s_less, cxn, monoref, name, Freq, pn_or_acro_or_nonnative_in_s, abbreviation, position, Determiner)
# use more intuitive names
colnames(s2) <- c("s_los", "Variante", "Monoreferenz", "Eigenname", "Frequenz", "Schonungsbedarf_s", "Kurzwort", "Position", "Determinierer")
# replace NAs
s2 <- replace_na(s2, list(Schonungsbedarf_s = "n"))
s2$Schonungsbedarf_s <- factor(s2$Schonungsbedarf_s)
# German s-los column
s2$s_los <- ifelse(s2$s_los=="n", "mit s", "s-los")
s2$s_los <- factor(s2$s_los, levels = rev(c("s-los", "mit s")))
# log frequency
s2$LogFreq <- log(s2$Frequenz)
# Determiner as factor
s2$Determinierer <- factor(s2$Determinierer)
s2$Position <- factor(s2$Position)
# ctree
stree <- ctree(s_los ~ Variante + Monoreferenz +
Eigenname + Kurzwort + Schonungsbedarf_s + LogFreq, data = s2)
#png("cit_wegen_s.png", width = 8, height = 5, un = "in", res = 300)
plot(stree)
# dev.off()
# random forest
sforest <- cforest(s_los ~ Variante + Monoreferenz +
Eigenname + Kurzwort + Schonungsbedarf_s + LogFreq, data = s2)
# get index of concordance - code
# adapted from Tagliamonte & Baayen 2012
s2.trp <- treeresponse(sforest)
s2$PredFOREST <- sapply(s2.trp, FUN = function(v)return(v[2]))
s2$s_los_bin <- (s2$s_los=="s-los") + 0
somers2(s2$PredFOREST, s2$s_los_bin)
# variable importance
vi <- varimp(sforest, conditional = T)
#png("varimp_wegen_s.png", width =8, height = 5, un = "in", res = 300)
lattice::dotplot(sort(vi),
xlab=list(label="Conditional variable importance", fontsize=20), scale=list(y=list(cex=2), x = list(cex = 2), x.title = list(cex = 2)),
par.settings = list(
axis.text = list(cex = 2)       # Controls axis text
))
#dev.off()
# Subset mit starken Maskulina und Neutra
s <- filter(w, s_less %in% c("y", "n") & case=="gen" & !is.na(Freq))
# convert categorical columns to factors
cols <- c("s_less", "cxn", "monoref", "forum", "abbreviation", "position")
s[cols] <- lapply(s[cols], as.factor)
# add binary proper name column
s$name <- factor(ifelse(s$Proper_name!="n", "y", "n"))
# willen(s)
s2 <- select(s, s_less, cxn, monoref, name, Freq, pn_or_acro_or_nonnative_in_s, abbreviation, position, Determiner)
# use more intuitive names
colnames(s2) <- c("s_los", "Variante", "Monoreferenz", "Eigenname", "Frequenz", "Schonungsbedarf_s", "Kurzwort", "Position", "Determinierer")
# replace NAs
s2 <- replace_na(s2, list(Schonungsbedarf_s = "n"))
s2$Schonungsbedarf_s <- factor(s2$Schonungsbedarf_s)
# German s-los column
s2$s_los <- ifelse(s2$s_los=="n", "mit s", "s-los")
s2$s_los <- factor(s2$s_los, levels = rev(c("s-los", "mit s")))
# log frequency
s2$LogFreq <- log(s2$Frequenz)
# Determiner as factor
s2$Determinierer <- factor(s2$Determinierer)
# ctree
stree2 <- ctree(s_los ~ Variante + Monoreferenz + Position +
Eigenname + Kurzwort + Schonungsbedarf_s + LogFreq, data = s2)
# png("cit_wegen_s_incl_pre.png", width = 6.5, height = 5, un = "in", res = 300)
plot(stree2)
plot(stree)
plot(stree)
plot(stree2)
plot(stree, title = "nur postnominal")
plot(stree, main = "nur postnominal")
plot(stree, main = expression(paste(bold("nur postnominal")))
)
plot(stree2, main = expression(paste(bold("prä- und postnominal"))))
par(mfrow = c(1,2))
png("cit_wegen_s_incl_excl_pre.png", width = 13, height = 5, un = "in", res = 300)
plot(stree, main = expression(paste(bold("nur postnominal"))))
plot(stree2, main = expression(paste(bold("prä- und postnominal"))))
dev.off()
png("cit_wegen_s_incl_excl_pre.png", width = 13, height = 5, un = "in", res = 300)
par(mfrow = c(1,2))
plot(stree, main = expression(paste(bold("nur postnominal"))))
plot(stree2, main = expression(paste(bold("prä- und postnominal"))))
dev.off()
par(mfrow = c(1,2))
plot(stree, main = expression(paste(bold("nur postnominal"))))
plot(stree2, main = expression(paste(bold("prä- und postnominal"))))
library(gridExtra)
library(grid)
# Create grobs (graphical objects) from the plots
g1 <- grid.grabExpr(plot(stree, main = expression(paste(bold("nur postnominal")))))
g2 <- grid.grabExpr(plot(stree2, main = expression(paste(bold("prä- und postnominal")))))
grid.arrange(g1, g2, ncol = 2)
png("cit_wegen_s_incl_excl_pre.png", width = 13, height = 5, units = "in", res = 300)
grid.arrange(g1, g2, ncol = 2)
dev.off()
png("cit_wegen_s_incl_excl_pre.png", width = 13, height = 5, units = "in", res = 300)
grid.arrange(g1, g2, ncol = 2)
dev.off()
png("cit_wegen_s_incl_excl_pre.png", width = 13, height = 6, units = "in", res = 300)
grid.arrange(g1, g2, ncol = 2)
dev.off()
# random forest
sforest <- cforest(s_los ~ Variante + Monoreferenz +
Eigenname + Kurzwort + Schonungsbedarf_s + LogFreq, data = s2)
vi
# get index of concordance - code
# adapted from Tagliamonte & Baayen 2012
s2.trp <- treeresponse(sforest)
s2$PredFOREST <- sapply(s2.trp, FUN = function(v)return(v[2]))
s2$s_los_bin <- (s2$s_los=="s-los") + 0
somers2(s2$PredFOREST, s2$s_los_bin)
# png("varimp_wegen_wegens_incl_pre.png", width = 8, height = 5, un = "in", res = 300)
lattice::dotplot(sort(vi),
xlab=list(label="Conditional variable importance", fontsize=20), scale=list(y=list(cex=2), x = list(cex = 2), x.title = list(cex = 2)),
par.settings = list(
axis.text = list(cex = 2)       # Controls axis text
))
# png("varimp_wegen_wegens_incl_pre.png", width = 8, height = 5, un = "in", res = 300)
lattice::dotplot(sort(vi),
xlab=list(label="Conditional variable importance", fontsize=20), scale=list(y=list(cex=2), x = list(cex = 2), x.title = list(cex = 2)),
par.settings = list(
axis.text = list(cex = 2)       # Controls axis text
))
# png("varimp_wegen_wegens_incl_pre.png", width = 8, height = 5, un = "in", res = 300)
lattice::dotplot(sort(vi2),
xlab=list(label="Conditional variable importance", fontsize=20), scale=list(y=list(cex=2), x = list(cex = 2), x.title = list(cex = 2)),
par.settings = list(
axis.text = list(cex = 2)       # Controls axis text
))
# variable importance
vi2 <- varimp(sforest, conditional = T)
# png("varimp_wegen_wegens_incl_pre.png", width = 8, height = 5, un = "in", res = 300)
lattice::dotplot(sort(vi2),
xlab=list(label="Conditional variable importance", fontsize=20), scale=list(y=list(cex=2), x = list(cex = 2), x.title = list(cex = 2)),
par.settings = list(
axis.text = list(cex = 2)       # Controls axis text
))
lattice::dotplot(sort(vi),
xlab=list(label="Conditional variable importance", fontsize=20), scale=list(y=list(cex=2), x = list(cex = 2), x.title = list(cex = 2)),
par.settings = list(
axis.text = list(cex = 2)       # Controls axis text
))
par(mfrow = c(1,2))
#png("filename.png", width = 13, height = 5, un = "in", res = 300)
lattice::dotplot(sort(vi),
xlab=list(label="Conditional variable importance", fontsize=20), scale=list(y=list(cex=2), x = list(cex = 2), x.title = list(cex = 2)),
par.settings = list(
axis.text = list(cex = 2)       # Controls axis text
))
lattice::dotplot(sort(vi2),
xlab=list(label="Conditional variable importance", fontsize=20), scale=list(y=list(cex=2), x = list(cex = 2), x.title = list(cex = 2)),
par.settings = list(
axis.text = list(cex = 2)       # Controls axis text
))
viplot1 <- lattice::dotplot(sort(vi),
xlab=list(label="Conditional variable importance", fontsize=20), scale=list(y=list(cex=2), x = list(cex = 2), x.title = list(cex = 2)),
par.settings = list(
axis.text = list(cex = 2)       # Controls axis text
))
lattice::dotplot(sort(vi2),
xlab=list(label="Conditional variable importance", fontsize=20), scale=list(y=list(cex=2), x = list(cex = 2), x.title = list(cex = 2)),
par.settings = list(
axis.text = list(cex = 2)       # Controls axis text
))
viplot2 <- lattice::dotplot(sort(vi2),
xlab=list(label="Conditional variable importance", fontsize=20), scale=list(y=list(cex=2), x = list(cex = 2), x.title = list(cex = 2)),
par.settings = list(
axis.text = list(cex = 2)       # Controls axis text
))
grid.arrange(viplot1, viplot2)
grid.arrange(viplot1, viplot2, ncol = 2)
(viplot1 <- lattice::dotplot(sort(vi),
xlab=list(label="Conditional variable importance", fontsize=20), scale=list(y=list(cex=2), x = list(cex = 2), x.title = list(cex = 2)),
par.settings = list(
axis.text = list(cex = 2)       # Controls axis text
), main = "bla"))
viplot1 <- lattice::dotplot(sort(vi),
xlab=list(label="Conditional variable importance", fontsize=20), scale=list(y=list(cex=2), x = list(cex = 2), x.title = list(cex = 2)),
par.settings = list(
axis.text = list(cex = 2)       # Controls axis text
), main = "nur postnominal")
viplot2 <- lattice::dotplot(sort(vi2),
xlab=list(label="Conditional variable importance", fontsize=20), scale=list(y=list(cex=2), x = list(cex = 2), x.title = list(cex = 2)),
par.settings = list(
axis.text = list(cex = 2)       # Controls axis text
), main = "prä- und postnominal")
grid.arrange(viplot1, viplot2, ncol = 2)
# random forest
sforest <- cforest(s_los ~ Variante + Monoreferenz +Position+
Eigenname + Kurzwort + Schonungsbedarf_s + LogFreq, data = s2)
# get index of concordance - code
# adapted from Tagliamonte & Baayen 2012
s2.trp <- treeresponse(sforest)
s2$PredFOREST <- sapply(s2.trp, FUN = function(v)return(v[2]))
s2$s_los_bin <- (s2$s_los=="s-los") + 0
somers2(s2$PredFOREST, s2$s_los_bin)
# variable importance
vi2 <- varimp(sforest, conditional = T)
# png("varimp_wegen_wegens_incl_pre.png", width = 8, height = 5, un = "in", res = 300)
lattice::dotplot(sort(vi2),
xlab=list(label="Conditional variable importance", fontsize=20), scale=list(y=list(cex=2), x = list(cex = 2), x.title = list(cex = 2)),
par.settings = list(
axis.text = list(cex = 2)       # Controls axis text
))
viplot1 <- lattice::dotplot(sort(vi),
xlab=list(label="Conditional variable importance", fontsize=20), scale=list(y=list(cex=2), x = list(cex = 2), x.title = list(cex = 2)),
par.settings = list(
axis.text = list(cex = 2)       # Controls axis text
), main = "nur postnominal")
viplot2 <- lattice::dotplot(sort(vi2),
xlab=list(label="Conditional variable importance", fontsize=20), scale=list(y=list(cex=2), x = list(cex = 2), x.title = list(cex = 2)),
par.settings = list(
axis.text = list(cex = 2)       # Controls axis text
), main = "prä- und postnominal")
#png("filename.png", width = 13, height = 5, un = "in", res = 300)
grid.arrange(viplot1, viplot2, ncol = 2)
png("varimp_wegens_incl_excl_pre.png", width = 13, height = 5, un = "in", res = 300)
grid.arrange(viplot1, viplot2, ncol = 2)
dev.off()
png("varimp_wegens_incl_excl_pre.png", width = 13, height = 6, un = "in", res = 300)
grid.arrange(viplot1, viplot2, ncol = 2)
dev.off()
w
which(w$monoref=="x")
w[which(w$monoref=="x"),]
w[which(w$monoref=="x"),]$lemma
