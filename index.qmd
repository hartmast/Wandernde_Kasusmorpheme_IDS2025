---
title: "Wandernde Kasusmorpheme"
format: html
editor: visual
---

## Wandernde Kasusmorpheme

Dieses Skript dokumentiert die Datenanalyse für eine Nacherhebung von \[ART (ADJ) N *wegen*\]-Konstruktionen für den Beitrag "'Wandernde' Kasusmorpheme: Variation, Fehler oder Vorboten des Sprachwandels?". Die restliche Analyse stützt sich auf zuvor getätigte Analysen, die [hier](https://doi.org/10.17605/OSF.IO/AUMG2) im Detail nachzulesen sind.

## Vorbereitung

Pakete installieren und laden:

```{r}
# CRAN-Pakete installieren
sapply(c("data.table", "tidyverse", "devtools", "party", "Hmisc", "rms", "RColorBrewer", "readxl", "patchwork", "grid", "gridExtra"), function(x) 
  if(!is.element(x, installed.packages())) install.packages(x, dependencies = T))

# Nom-CRAN-Paket installieren (falls noch nicht installiert)
if(!is.element("wizard", installed.packages())) {
  devtools::install_github("hartmast/wizard")
}

# Pakete laden
library(tidyverse)
library(data.table)
library(wizard)
library(party)
library(Hmisc)
library(rms)
library(RColorBrewer)
library(readxl)
library(patchwork)
library(ngram)
library(lme4)
library(effects)
library(gridExtra)
library(grid)

# Funktion, um schnell Barplots zu erstellen
qbarplot2 <- function(df, ..., color = c("Oranges", F), angle = 0) {
  
  if(missing(color)) { color = "Oranges"  }
  
  p <- qbarplot(df, cex = 5, ...) + theme_bw() +
    theme(axis.text = element_text(size = 18)) +
    theme(axis.title = element_text(size = 18)) +
    theme(strip.text = element_text(size = 18)) +
    theme(legend.text = element_text(size = 18)) +
    theme(legend.title = element_text(size = 18, face = "bold")) +
    theme(text = element_text(size = 18))
  
  if(angle!=0) {
    p <- p + theme(axis.text.y = element_text(size = 18)) +
      theme(axis.text.x = element_text(angle = angle, size = 18,hjust = .9))
  } else {
    if(angle!=0) {
     p <- p + theme(axis.text = element_text(size = 18))
    }
  }
  
  
  if(color == "Oranges") {
    p <- p + scale_fill_brewer(palette = "Oranges")
  } else {
    p <- p
  }
  
  return(p)
    
}
```

## Daten einlesen & Data Wrangling

Hier werden die Daten eingelesen und die zusammengehörigen Datensätze miteinander verknüpft.

```{r}

# Daten einlesen

# wegens:
ws <- read_csv("wegens/wegens_DECOW16BX_anno.csv")
ws <- mutate(ws, cxn = "wegens")

# wegen ohne s:
w0 <- read_csv("wegens/wegen_sample_DECOW16BX_anno.csv")
w0 <- mutate(w0, cxn = "wegen")

# Nacherhebung postnominales wegen:
w0p <- read_csv("wegens/wegen_postnom_DECOW16A_NANO_filtered.csv")
w0p <- mutate(w0p, cxn = "wegen")

# Spalte Position hinzufügen
w0p$position <- "post"


# DATA WRANGLING - wegen(s)

# relevante Spalten finden
mycols <- intersect(colnames(w0), colnames(w0p))

# zusammenfügen
w <- rbind(mutate(select(ws, all_of(mycols)), cxn = "wegens"),
mutate(select(w0, all_of(mycols)), cxn = "wegen"),
mutate(select(w0p, all_of(mycols)), cxn = "wegen"))

# nur true positives behalten
w <- filter(w, keep == "y")

# Duplikate entfernen
w <- w[-which(duplicated(select(w, Left, Key, Right))),]

# nur postnominales wegen(s)
wp <- filter(w, position == "post")


```

## Random forest - postnom. wegen(s)

```{r}

# Subset mit starken Maskulina und Neutra
s <- filter(wp, s_less %in% c("y", "n") & case=="gen" & !is.na(Freq))

# convert categorical columns to factors
cols <- c("s_less", "cxn", "monoref", "forum", "abbreviation")
s[cols] <- lapply(s[cols], as.factor)

# add binary proper name column
s$name <- factor(ifelse(s$Proper_name!="n", "y", "n"))

# willen(s)
s2 <- select(s, s_less, cxn, monoref, name, Freq, pn_or_acro_or_nonnative_in_s, abbreviation, position, Determiner)

# use more intuitive names
colnames(s2) <- c("s_los", "Variante", "Monoreferenz", "Eigenname", "Frequenz", "Schonungsbedarf_s", "Kurzwort", "Position", "Determinierer")

# replace NAs
s2 <- replace_na(s2, list(Schonungsbedarf_s = "n"))
s2$Schonungsbedarf_s <- factor(s2$Schonungsbedarf_s)

# German s-los column
s2$s_los <- ifelse(s2$s_los=="n", "mit s", "s-los")
s2$s_los <- factor(s2$s_los, levels = rev(c("s-los", "mit s")))

# log frequency
s2$LogFreq <- log(s2$Frequenz)

# Determiner as factor
s2$Determinierer <- factor(s2$Determinierer)
s2$Position <- factor(s2$Position)

# ctree
stree <- ctree(s_los ~ Variante + Monoreferenz +   
                 Eigenname + Kurzwort + Schonungsbedarf_s + LogFreq, data = s2)

#png("cit_wegen_s.png", width = 8, height = 5, un = "in", res = 300)
plot(stree)
# dev.off()



# random forest
sforest <- cforest(s_los ~ Variante + Monoreferenz +   
                 Eigenname + Kurzwort + Schonungsbedarf_s + LogFreq, data = s2)

# get index of concordance - code
# adapted from Tagliamonte & Baayen 2012
s2.trp <- treeresponse(sforest)
s2$PredFOREST <- sapply(s2.trp, FUN = function(v)return(v[2]))
s2$s_los_bin <- (s2$s_los=="s-los") + 0
somers2(s2$PredFOREST, s2$s_los_bin)

# variable importance
vi <- varimp(sforest, conditional = T)

#png("varimp_wegen_s.png", width =8, height = 5, un = "in", res = 300)

lattice::dotplot(sort(vi),
                 xlab=list(label="Conditional variable importance", fontsize=20), scale=list(y=list(cex=2), x = list(cex = 2), x.title = list(cex = 2)),
                   par.settings = list(
    axis.text = list(cex = 2)       # Controls axis text

  ))
#dev.off()



```

## Random forest - wegen(s) prä- und postnom.

```{r}

# Subset mit starken Maskulina und Neutra
s <- filter(w, s_less %in% c("y", "n") & case=="gen" & !is.na(Freq))

# convert categorical columns to factors
cols <- c("s_less", "cxn", "monoref", "forum", "abbreviation", "position")
s[cols] <- lapply(s[cols], as.factor)

# add binary proper name column
s$name <- factor(ifelse(s$Proper_name!="n", "y", "n"))

# willen(s)
s2 <- select(s, s_less, cxn, monoref, name, Freq, pn_or_acro_or_nonnative_in_s, abbreviation, position, Determiner)

# use more intuitive names
colnames(s2) <- c("s_los", "Variante", "Monoreferenz", "Eigenname", "Frequenz", "Schonungsbedarf_s", "Kurzwort", "Position", "Determinierer")

# replace NAs
s2 <- replace_na(s2, list(Schonungsbedarf_s = "n"))
s2$Schonungsbedarf_s <- factor(s2$Schonungsbedarf_s)

# German s-los column
s2$s_los <- ifelse(s2$s_los=="n", "mit s", "s-los")
s2$s_los <- factor(s2$s_los, levels = rev(c("s-los", "mit s")))

# log frequency
s2$LogFreq <- log(s2$Frequenz)

# Determiner as factor
s2$Determinierer <- factor(s2$Determinierer)


# ctree
stree2 <- ctree(s_los ~ Variante + Monoreferenz + Position +   
                 Eigenname + Kurzwort + Schonungsbedarf_s + LogFreq, data = s2)

# png("cit_wegen_s_incl_pre.png", width = 6.5, height = 5, un = "in", res = 300)
plot(stree2)
# dev.off()

# beide Trees

g1 <- grid.grabExpr(plot(stree, main = expression(paste(bold("nur postnominal")))))
g2 <- grid.grabExpr(plot(stree2, main = expression(paste(bold("prä- und postnominal")))))

# exportieren
#png("cit_wegen_s_incl_excl_pre.png", width = 13, height = 6, units = "in", res = 300)
grid.arrange(g1, g2, ncol = 2)
# dev.off()





# random forest
sforest <- cforest(s_los ~ Variante + Monoreferenz +Position+   
                 Eigenname + Kurzwort + Schonungsbedarf_s + LogFreq, data = s2)

# get index of concordance - code
# adapted from Tagliamonte & Baayen 2012
s2.trp <- treeresponse(sforest)
s2$PredFOREST <- sapply(s2.trp, FUN = function(v)return(v[2]))
s2$s_los_bin <- (s2$s_los=="s-los") + 0
somers2(s2$PredFOREST, s2$s_los_bin)

# variable importance
vi2 <- varimp(sforest, conditional = T)

# png("varimp_wegen_wegens_incl_pre.png", width = 8, height = 5, un = "in", res = 300)
lattice::dotplot(sort(vi2),
                 xlab=list(label="Conditional variable importance", fontsize=20), scale=list(y=list(cex=2), x = list(cex = 2), x.title = list(cex = 2)),
                   par.settings = list(
    axis.text = list(cex = 2)       # Controls axis text

  ))
# dev.off()




viplot1 <- lattice::dotplot(sort(vi),
                 xlab=list(label="Conditional variable importance", fontsize=20), scale=list(y=list(cex=2), x = list(cex = 2), x.title = list(cex = 2)),
                   par.settings = list(
    axis.text = list(cex = 2)       # Controls axis text

  ), main = "nur postnominal")


viplot2 <- lattice::dotplot(sort(vi2),
                 xlab=list(label="Conditional variable importance", fontsize=20), scale=list(y=list(cex=2), x = list(cex = 2), x.title = list(cex = 2)),
                   par.settings = list(
    axis.text = list(cex = 2)       # Controls axis text

  ), main = "prä- und postnominal")

# png("varimp_wegens_incl_excl_pre.png", width = 13, height = 6, un = "in", res = 300)
grid.arrange(viplot1, viplot2, ncol = 2)
# dev.off()


```

Was passiert, wenn wir das höchstfrequente *Geld* weglassen?

```{r}
# Subset mit starken Maskulina und Neutra, aber ohne "Geld
s <- filter(w, lemma != "Geld" & s_less %in% c("y", "n") & case=="gen" & !is.na(Freq))

# convert categorical columns to factors
cols <- c("s_less", "cxn", "monoref", "forum", "abbreviation", "position")
s[cols] <- lapply(s[cols], as.factor)

# add binary proper name column
s$name <- factor(ifelse(s$Proper_name!="n", "y", "n"))

# willen(s)
s2 <- select(s, s_less, cxn, monoref, name, Freq, pn_or_acro_or_nonnative_in_s, abbreviation, position, Determiner)

# use more intuitive names
colnames(s2) <- c("s_los", "Variante", "Monoreferenz", "Eigenname", "Frequenz", "Schonungsbedarf_s", "Kurzwort", "Position", "Determinierer")

# replace NAs
s2 <- replace_na(s2, list(Schonungsbedarf_s = "n"))
s2$Schonungsbedarf_s <- factor(s2$Schonungsbedarf_s)

# German s-los column
s2$s_los <- ifelse(s2$s_los=="n", "mit s", "s-los")
s2$s_los <- factor(s2$s_los, levels = rev(c("s-los", "mit s")))

# log frequency
s2$LogFreq <- log(s2$Frequenz)

# Determiner as factor
s2$Determinierer <- factor(s2$Determinierer)


# ctree
stree <- ctree(s_los ~ Variante + Monoreferenz + Position +   
                 Eigenname + Kurzwort + Schonungsbedarf_s + LogFreq, data = s2)

#png("cit_wegen_s_incl_pre_excl_Geld.png", width = 8, height = 5, un = "in", res = 300)
plot(stree)
#dev.off()




# random forest
sforest <- cforest(s_los ~ Variante + Monoreferenz + Position +  
                 Eigenname + Kurzwort + Schonungsbedarf_s + LogFreq, data = s2)

# get index of concordance - code
# adapted from Tagliamonte & Baayen 2012
s2.trp <- treeresponse(sforest)
s2$PredFOREST <- sapply(s2.trp, FUN = function(v)return(v[2]))
s2$s_los_bin <- (s2$s_los=="s-los") + 0
somers2(s2$PredFOREST, s2$s_los_bin)

# variable importance
vi <- varimp(sforest, conditional = T)

png("varimp_wegen_s_incl_pre_excl_Geld.png", width = 8, height = 5, un = "in", res = 300)
lattice::dotplot(sort(vi),  xlab=list(label="Conditional variable importance", fontsize=20), scale=list(y=list(cex=2), x = list(cex = 2), x.title = list(cex = 2)),
                   par.settings = list(
    axis.text = list(cex = 2)       # Controls axis text

  ))
dev.off()

```

## Kasusverteilung

```{r}

# Stellung als Faktor mit pre als Basis
w$Position <- factor(w$position, levels = c("pre", "post"))

w$case <- factor(w$case, levels = c("nom", "gen", "gen_dat", "gen_dat_nom", "gen_nom_akk", "gen_dat_nom_akk", "gen_akk", "nom_akk", "akk", "dat", "dat_akk", "unclear"))

w <- mutate(w, Kasus = case_when(case == "nom" ~ "Nominativ",
                            case == "gen" ~ "Genitiv",
                            case == "gen_dat" ~ "Genitiv oder Dativ",
                            case == "gen_dat_nom" ~ "Genitiv, Dativ oder Nominativ",
                            case == "gen_dat_nom_akk" ~ "Genitiv, Dativ, Nominativ oder Akkusativ",
                            case == "gen_akk" ~ "Genitiv oder Akkusativ",
                            case == "nom_akk" ~ "Nominativ oder Akkusativ",
                            case == "akk" ~ "Akkusativ",
                            case == "dat" ~ "Dativ",
                            case == "dat_akk" ~ "Dativ oder Akkusativ",
                            case == "unclear" ~ "unklar"))

w$Kasus <- factor(w$Kasus, levels =  c("Nominativ",
 "Genitiv",
 "Genitiv oder Dativ",
 "Genitiv, Dativ oder Nominativ",
 "Genitiv, Dativ, Nominativ oder Akkusativ",
 "Genitiv oder Akkusativ",
 "Nominativ oder Akkusativ",
 "Akkusativ",
 "Dativ",
 "Dativ oder Akkusativ",
 "unklar"))

w <- w %>% mutate(Stellung = case_when(position=="pre" ~ "präponiert",
                                  position=="post" ~"postponiert"))

w$Stellung <- factor(w$Stellung, levels = c("präponiert", "postponiert"))

# alle Kasus:
qbarplot(filter(w, keep == "y" & position!="both"), cxn, Kasus,Stellung, wrap100 = T) + scale_fill_viridis_d(begin = .3, end = .9) + ylab("Relative Frequenz") + xlab("Konstruktion") +
  guides(fill = guide_legend(title = "Kasus")) +
  scale_fill_viridis_d(begin = .2, end = .8) +
  theme(axis.text = element_text(size = 18)) +
  theme(axis.title = element_text(size = 18)) +
  theme(strip.text = element_text(size = 18)) +
  theme(legend.text = element_text(size = 18)) +
  theme(legend.title = element_text(size = 18, face = "bold")) +
  theme(text = element_text(size = 18))


# nur Kasuskategorien mit >10 Belegen:
qbarplot(droplevels(filter(w, keep == "y" & Position!="both" & case %in% c("gen", "gen_dat", "gen_dat_nom_akk", "nom_akk", "dat", "unclear"))), cxn, Kasus, Stellung, wrap100 = T) + ylab("Relative Frequenz") + xlab("Konstruktion") +
  guides(fill = guide_legend(title = "Kasus")) +
  scale_fill_brewer(palette = "Oranges") +
  theme(axis.text = element_text(size = 18)) +
  theme(axis.title = element_text(size = 18)) +
  theme(strip.text = element_text(size = 18)) +
  theme(legend.text = element_text(size = 18)) +
  theme(legend.title = element_text(size = 18, face = "bold")) +
  theme(text = element_text(size = 18))
# ggsave("figures/wegen_s_kasus_10plus.png", width = 12, height = 7)

# einfaches Regressionsmodell Gen. vs. Dat
m <- glmer(case ~  Position + (1 | lemma), data = filter(w, case %in% c("gen", "dat")), family = "binomial")
summary(m)

```

## Genusdistribution

```{r}

# Unterscheidung starke/schwache Maskulina
w$klasse <- NA
w[which(w$Gender %in% c("m", "n") & w$s_less=="x" & w$Number=="sg"),]$klasse <- "schwach"
w[which(is.na(w$klasse)),]$klasse <- "nicht_schwach"


# Genus-Spalte mit Unterscheidung zwischen starken und schwachen Nomen
w$Genus <- ifelse(w$Gender=="m" & w$klasse=="schwach", "Mask. schwach", w$Gender)
w$Genus <- ifelse(w$Gender=="m" & w$klasse!="schwach", "Mask. stark/gemischt", w$Genus)
w$Genus <- ifelse(w$Genus=="f", "Femininum", w$Genus)
w$Genus <- ifelse(w$Genus=="n", "Neutrum", w$Genus)

# plot
w %>% filter(Number=="sg" & Genus != "x" & position != "both") %>% qbarplot2(cxn, Genus, Stellung, ylab = "Relative Frequenz", xlab = "Variante", wrap100=T) + 
  guides(fill = guide_legend(title = "Genus")) +
  scale_fill_brewer(palette = "Oranges")
  
# ggsave("figures/wegens_genusdistribution.png")


```

Einfaches Regressionsmodell zur Genusdistribution

```{r}

# binäre Operationalisierung der Genuskategorien
w$stark_gem_neutr <- ifelse(w$Genus %in% c("Mask. stark/gemischt", "Neutrum"), "y", "n")
w$stark_gem_neutr <- factor(w$stark_gem_neutr)
w$cxn_factor <- factor(w$cxn)

# glm
m <- glm(stark_gem_neutr ~ cxn_factor * Position, data = w, family = "binomial")
summary(m)
plot(allEffects(m))


```

## s-lose Genitive

```{r}

w %>% filter(Number=="sg" & Gender %in% c("m", "n") & klasse=="nicht_schwach" & position != "both") %>% mutate(s_los = ifelse(s_less=="y", "ja", "nein")) %>% qbarplot(cxn, s_los, Position, wrap100 = T) + scale_fill_brewer(palette = "Oranges") +
  guides(fill = guide_legend(title = "s-los")) + xlab("Konstruktion") + ylab("Relative Frequenz")
# ggsave("figures/wegen_s_s_los.png") 

```

## Hochfrequente Lexeme

Welche Lexeme sind hochfrequent?

```{r}

w$logFreq <- log1p(w$Freq)

w %>% filter(Number=="sg" & Gender %in% c("m", "n") & klasse=="nicht_schwach" & position == "post" & logFreq > 13.883) %>% group_by(lemma) %>% summarise(
  n = n()
) %>% arrange(desc(n))

```

## Systemumgebung

Systeminfo und Paketversionen zur besseren Reproduzierbarkeit

```{r, message=FALSE}
Sys.info()
renv::snapshot()
```

## Verteilung Migration/Dopplung

```{r}



w$s_typ <-  case_when(w$cxn=="wegens" & w$Gender %in% c("m", "n") & w$s_less=="y" ~ "Migration",
          w$cxn=="wegens" & w$Gender %in% c("m", "n") & w$s_less=="n" ~ "Dopplung",
          w$cxn=="wegens" & w$Gender %in% c("m", "n") & w$s_less=="x" ~ "kein s möglich",
          w$cxn=="wegens" & w$Gender == "f" & w$s_less=="n" & !is.na(w$s_less) ~ "s unmöglich, aber trotzdem da",
          w$cxn=="wegens" & w$Gender == "f" & w$s_less=="x" | is.na(w$s_less) ~ "kein s möglich")


# Verteilung Migration/Dopplung
filter(w, cxn=="wegens") %>% mutate(s_typ = factor(s_typ, levels = c("kein s möglich", "Migration", "Dopplung"))) %>% mutate(Position = factor(position, levels = c("pre", "post"))) %>% qbarplot2(Position, s_typ) + ylab("Relative Frequenz") +
  guides(fill = guide_legend(title = "Typ")) 

```

## Exploration der Lemmas/Wortformen

```{r}

w$endet_mit_en <- grepl(".*en$", w$lemma)

qbarplot(w, cxn, endet_mit_en, Position, wrap100=T)

w %>% select(cxn, endet_mit_en, Position, lemma) %>% unique() %>% qbarplot(cxn, endet_mit_en, Position, wrap100=T)
```
